@page "/votingresults"
@using Common.Extensions;
@inject HttpClient Http
@inject VotingManager _votingManager
@inject NavigationManager _navManager
@inject IJSRuntime JS

<PageTitle>Last voting results</PageTitle>
<section class="text-center container">
    <div class="row py-lg-5">
        <div class="col-lg-6 col-md-8 mx-auto">
            <h1 class="fw-light">@projectName</h1>
            <p class="lead text-muted">
                @votingId?.HexToString()
            </p><p>
                <span class="badge rounded-pill text-bg-light  mb-3">Ledger index start: @votingStartIndex?.ToString("N0")</span>
                <span class="badge rounded-pill text-bg-light  mb-3">Ledger index end: @votingEndIndex?.ToString("N0")</span>
                <span class="badge rounded-pill text-bg-light  mb-3">Total account votes: @_votingReport?.TotalAccountsVoted.ToString("N0")</span>
                <span class="badge rounded-pill text-bg-light  mb-3">Total unique account votes: @_votingReport?.UniqueAccountsVoted</span>
                <span class="badge rounded-pill text-bg-light  mb-3">Total valid and unique account votes: @_votingReport?.UniqueValidAccountsVoted.ToString("N0")</span>
                <span class="badge rounded-pill text-bg-light  mb-3">Total votes cast: @_votingReport?.TotalVotesCast.ToString("N0")</span>
            </p>
        </div>
    </div>
</section>
<div class="album py-5 bg-light">
    <div class="container">
        @if (!_latestVotingFetched)
        {
                <div style="display:grid;place-items:center;margin-top:10%" class="mb-3">
                    <span class="loader">Fetching votes from XRPL</span>
                </div>

        }
        else
        {
            @if (_votingReport is not null && _votingReport.Details is not null && _votingReport.Details.Count > 0)
            {
                        <div class="row">
                            <div class="col-lg-6 mb-4">
                                <div class="card rounded-3 shadow-sm">
                                    <div class="card-header py-3">
                                        <h4 class="my-0 fw-normal">Voting results</h4>

                                    </div>
                                    <div class="card-body">
                                @{
                                    int position = 0;
                                    foreach (var resultItem in _votingReport.Details.OrderByDescending(x => x.PercentageVote))
                                    {
                                        position++;
                                        var collapseId = string.Concat("rv", Guid.NewGuid());
                                                    <h4 class="small fw-bold">
                                                            <span class="badge text-success"></span><span class="float-start">@String.Concat(@position.ToString("D2"),". ",resultItem.Option)</span><span class="badge text-success"><em>@resultItem.TotalVotes.ToString("N0") votes</em></span>
                                                        <button class="btn btn-sm btn-outline-dark position-relative float-end m-2" type="button" data-bs-toggle="collapse" data-bs-target="#@collapseId" aria-expanded="false" aria-controls="@collapseId">Details</button>
                                                    </h4>
                                                    <div class="progress mb-4">
                                                        <div class="progress-bar bg-danger" aria-valuenow="@resultItem.PercentageVote.ToString("N0")" aria-valuemin="0" aria-valuemax="100" style="width: @resultItem.PercentageVote.ToString("N2")%;" data-bs-toggle="tooltip" data-bs-placement="top" title="@resultItem.PercentageVote.ToString("N2")%"><span class="visually-hidden">@resultItem.PercentageVote.ToString("N2")%</span></div>
                                                        &nbsp;<em class="text-black">@resultItem.PercentageVote.ToString("N2")%</em>
                                                    </div>
                                                    <div class="col">
                                                        <div class="collapse multi-collapse" id="@collapseId">
                                                            <div class="card card-body">
                                                                <!-- content-->
                                                    @((MarkupString)showDetailsAsHtml(resultItem.Option))

                                                                <!-- end content-->
                                                            </div>
                                                        </div>
                                                    </div>
                                    }
                                }


                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-6 mb-4">
                                <div class="card rounded-3 shadow-sm">
                                    <div class="card-header py-3">
                                        <h4 class="my-0 fw-normal">Popular vote results</h4>

                                    </div>
                                    <div class="card-body">
                                @{
                                    int positionpv = 0;
                                    @foreach (var resultItem in _votingReport.Details.OrderByDescending(x => x.TotalValidAccountsVoted))
                                    {
                                        positionpv++;
                                                        <h4 class="small fw-bold">
                                                            <span class="badge text-success"></span><span class="float-start">@String.Concat(@positionpv.ToString("D2"),". ",resultItem.Option)</span><span class="badge text-success"><em>@resultItem.TotalValidAccountsVoted.ToString("N0") votes</em></span>

                                                    </h4>
                                                    <div class="progress mb-4">
                                                            <div class="progress-bar bg-danger" aria-valuenow="@(((resultItem.TotalValidAccountsVoted * 100) / _votingReport.UniqueAccountsVoted).ToString("N0"))" aria-valuemin="0" aria-valuemax="100" style="width: @(((resultItem.TotalValidAccountsVoted * 100) / _votingReport.UniqueAccountsVoted).ToString("N2"))" data-bs-toggle="tooltip" data-bs-placement="top" title="@(((resultItem.TotalValidAccountsVoted * 100) / _votingReport.UniqueAccountsVoted).ToString("N2"))%"><span class="visually-hidden">@(((resultItem.TotalValidAccountsVoted * 100) / _votingReport.UniqueAccountsVoted).ToString("N2"))%</span></div>
                                                            &nbsp;<em class="text-black">@(((resultItem.TotalValidAccountsVoted * 100) / _votingReport.UniqueAccountsVoted).ToString("N2"))%</em>
                                                    </div>

                                    }
                                }


                                    </div>
                                </div>
                            </div>
                        </div>
            }
        }

    </div>
</div>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public string? votingId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "pn")]
    public string? projectName { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "pt")]
    public string? projectToken { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "si")]
    public int? votingStartIndex { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "ei")]
    public int? votingEndIndex { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "va")]
    public string? votingAccount { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "ia")]
    public string? issuerAccount { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "vca")]
    public string? votingControllerAccount { get; set; }



    private string _endPoint = "wss://xrplcluster.com/";
    private List<VotingResults> _votingResultsActual = new();
    private VotingResultReport _votingReport = new();
    private bool _latestVotingFetched = false;

    protected override async Task OnInitializedAsync()
    {
        _latestVotingFetched = false;
        StateHasChanged();
        _votingReport.ProjectToken = projectToken;
        _votingReport.ProjectName = projectName;
        _votingReport.LedgerIndex = (uint)votingEndIndex;
        _votingReport.VotingId = votingId;
        _votingReport.VotingName = votingId?.HexToString();

        await GetLastVotingDetails();
        await GetResultsFromXrpl();

        _latestVotingFetched = true;
        StateHasChanged();

    }

    private async Task GetLastVotingDetails()
    {
        CancellationTokenSource ctx = new CancellationTokenSource(new TimeSpan(0, 0, 20)); //20 seconds
        var projectConfig = new ProjectConfig();
        projectConfig.ControllerAccount = votingControllerAccount;
        projectConfig.IssuerAccount = issuerAccount;
        projectConfig.ProjectToken = projectToken;
        projectConfig.ProjectName = projectName;
        projectConfig.VotingAccount = votingAccount;
        projectConfig.LedgerVotingStartIndex = (UInt32)votingStartIndex;


        var result = await _votingManager.GetLastVoting(projectConfig, ctx);

        if (result is not null && result?.VotingOptions?.Count() > 0)
        {
            _votingReport.Details = new();

            foreach (var voteOption in result.VotingOptions)
            {
                _votingReport.Details.Add(new VoteResults()
                    {
                        Option = voteOption,
                        votingAccountDetails = new()

                    });
            }

        }
    }

    private async Task GetResultsFromXrpl()
    {

        CancellationTokenSource ctx = new CancellationTokenSource(new TimeSpan(0, 5, 0)); //5 minutes
        List<string> accounts = new();
        List<VotingResults> rawVotingResults = new();


        await foreach (var result in _votingManager.GetVotingResults(votingAccount, votingControllerAccount, (UInt32)votingStartIndex, (UInt32)votingEndIndex, ctx, _endPoint))
        {
            rawVotingResults.Add(result);
            accounts.Add(result.VoterAddress);
        }


        //get account balances
        ctx = new CancellationTokenSource(new TimeSpan(0, 5, 0)); //5 minutes
                                                                  //List<VotingResults> workingVotingResults = new List<VotingResults>();
        var accountsWithVotes = 0;
        await foreach (var balanceResult in _votingManager.GetVoterBalancesAsync(accounts.Distinct().ToList(), issuerAccount, (UInt32)votingEndIndex, projectToken, ctx, _endPoint))
        {
            if (balanceResult.Balance > 0)
            {
                var optionVotedOn = rawVotingResults.Where(x => x.VoterAddress == balanceResult.Address).OrderByDescending(x => x.VoteRegistrationIndex).FirstOrDefault().VoterChoice;


                //add item to vote
                var selectedOption = _votingReport.Details.First(x => x.Option == optionVotedOn);
                if (selectedOption is not null)
                {
                    selectedOption.votingAccountDetails.Add(balanceResult);
                    accountsWithVotes++; //actual valid accounts as they have a vote count > 0
                }
            }


        }

        //summarize
        _votingReport.TotalVotesCast = _votingReport.Details.SelectMany(x => x.votingAccountDetails).Sum(x => x.Balance);
        _votingReport.UniqueValidAccountsVoted = accountsWithVotes;
        _votingReport.UniqueAccountsVoted = accounts.Distinct().Count();
        _votingReport.TotalAccountsVoted = accounts.Count();
        foreach (var detailItem in _votingReport.Details)
        {
            detailItem.TotalVotes = detailItem.votingAccountDetails.Sum(x => x.Balance);
            detailItem.TotalValidAccountsVoted = detailItem.votingAccountDetails.Count;
            detailItem.PercentageVote = (detailItem.TotalVotes * 100) / _votingReport.TotalVotesCast;

        }





    }



    private string showDetailsAsHtml(string option)
    {
        var details = _votingReport.Details.Where(x => x.Option == option).FirstOrDefault();
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        var templateHtml = "<h4 class='small fw-bold'><span class='badge text-success text-xxl-start'></span>&emsp;<span><small><a class='link-success' href='/accountinfo?acc=#accountid#' target='_blank'>#accountid#</a></small></span>&emsp;<span class='badge text-success float-end'>#totalvotes# votes</span>";
        if (details is not null)
        {
            foreach (var item in details.votingAccountDetails.ToList().OrderByDescending(x => x.Balance))
            {
                string balance = string.Empty;
                if (item.Balance < 1)
                {
                    balance = item.Balance.ToString("N13");
                }
                else
                {
                    balance = item.Balance.ToString("N0");
                }

                sb.Append(templateHtml.Replace("#accountid#", item.Address).Replace("#totalvotes#", balance));
            }

        }
        if (sb.Length > 0)
        {
            return sb.ToString();
        }
        else
        {
            return string.Empty;
        }


    }


}
