@page "/votingresults"
@using Common.Extensions;

@inject HttpClient Http
@inject VotingManager _votingManager
@inject NavigationManager _navManager
@inject LedgerManager _ledgerManager
@inject IJSRuntime JS

<PageTitle>Last voting results</PageTitle>
<section class="text-center container">
    <div class="row py-lg-5">
        <div class="col-lg-6 col-md-8 mx-auto">
            <div class="row">
                <div class="col"><h1 class="fw-light">@projectName</h1></div>
                @if (_isLive)
                {
                    <div class="col-auto">
                        <small class="text-muted">
                            &nbsp;LIVE&nbsp;
                            <span style="display: inline-block; margin-right: 0.5rem;" class="float-start">
                                <HxSpinner Size="SpinnerSize.Small" Type="SpinnerType.Grow" Color="ThemeColor.Danger" />
                            </span>
                        </small>
                    </div>
                }

            </div>

            <p class="lead text-muted">
                @votingId?.HexToString()
            </p><p>
                <span class="badge rounded-pill text-bg-light  mb-3">Ledger index start: @votingStartIndex?.ToString("N0")</span>
                @if (!_isLive)
                {
                    <span class="badge rounded-pill text-bg-light  mb-3">Ledger index end: @votingEndIndex?.ToString("N0")</span>
                }
                else
                {
                    <spann class="badge rounded-pill text-bg-light mb-3">Ledger index end: ongoing</spann>
                }

                <span class="badge rounded-pill text-bg-light mb-3">Total votes cast: @_votingReport?.TotalVotesCast.ToString("N0")</span>
                <span class="badge rounded-pill text-bg-warning mb-3">Total account votes: @_popularVote.Count().ToString("N0")</span>
                <span class="badge rounded-pill text-bg-success  mb-3">Total (valid) account votes: @_votingReport?.UniqueValidAccountsVoted.ToString("N0")</span>

                @if (_totalInvalidatedVotes > 0)
                {
                    <span class="badge rounded-pill text-bg-danger mb-3">Total invalidated votes: @_totalInvalidatedVotes.ToString("N0")</span>
                }
                @if (_latestLedgerIndex.ledgerIndex > 0)
                {
                    <span class="badge rounded-pill text-bg-light  mb-3">Snapshot datetime (UTC): @_latestLedgerIndex.ledgerCloseTimeUTC.ToString("F")</span>
                    <span class="badge rounded-pill text-bg-light  mb-3">Snapshot datetime (local): @_latestLedgerIndex.ledgerCloseTimeUTC.ToLocalTime().ToString("F")</span>
                }
            </p>
        </div>
    </div>
    @if(!string.IsNullOrWhiteSpace(_warningMessage))
    {
    <div class="row py-lg-5">
        <div class="col-lg-6 col-md-8 mx-auto">
            <div class="alert alert-danger" role="alert">
                @_warningMessage;
            </div>
            </div>
    </div>
    }
</section>
<div class="album py-5 bg-light">
    <div class="container">

        <div class="row">
            @if (!popularVoteIsLoading)
            {
                <div class="col-lg-6 mb-4">
                    <div class="card rounded-3 shadow-sm">
                        <div class="card-header py-3">
                            <div class="row">
                                <div class="col">
                                    <h4 class="my-0 fw-normal">Voting results</h4>
                                    @if (generalVoteIsLoading)
                                    {
                                        <span class="float-end">
                                            <HxSpinner Size="SpinnerSize.Regular" Color="ThemeColor.Danger"></HxSpinner>
                                        </span>


                                    }
                                </div>

                                @if (_isLive)
                                {

                                    <div class="col-auto">
                                        <button class="btn btn-sm btn-warning position-relative float" type="button" @onclick="@Refresh">Refresh results</button>
                                    </div>
                                }

                            </div>
                        </div>
                        <div class="card-body">
                            @if (_votingReport is not null && _votingReport.Details is not null && _votingReport.Details.Count > 0 && (_votingReport.Details.Select(x => x.TotalVotes).Count() > 0))
                            {
                                int position = 0;
                                foreach (var resultItem in _votingReport.Details.OrderByDescending(x => x.PercentageVote))
                                {
                                    position++;
                                    var collapseId = string.Concat("rv", Guid.NewGuid());
                                    <h4 class="small fw-bold">
                                        <span class="badge text-success"></span><span class="float-start">@String.Concat(@position.ToString("D2"),". ",resultItem.Option)</span><span class="badge text-success"><em>@resultItem.TotalVotes.ToString("N0") votes</em></span>
                                        <button class="btn btn-sm btn-outline-dark position-relative float-end m-2" type="button" data-bs-toggle="collapse" data-bs-target="#@collapseId" aria-expanded="false" aria-controls="@collapseId">Details</button>
                                    </h4>
                                    <div class="progress mb-4">
                                        <div class="progress-bar bg-danger" aria-valuenow="@resultItem.PercentageVote.ToString("N0")" aria-valuemin="0" aria-valuemax="100" style="width: @resultItem.PercentageVote.ToString("N2")%;" data-bs-toggle="tooltip" data-bs-placement="top" title="@resultItem.PercentageVote.ToString("N2")%"><span class="visually-hidden">@resultItem.PercentageVote.ToString("N2")%</span></div>
                                        &nbsp;<em class="text-black">@resultItem.PercentageVote.ToString("N2")%</em>
                                    </div>
                                    <div class="col">
                                        <div class="collapse multi-collapse" id="@collapseId">
                                            <div class="card card-body">
                                                <!-- content-->
                                                <div class="col-auto">
                                                    <HxSwitch Text="sort details by votes" TextCssClass="text-small float" @bind-Value="_sortDetailsByVotes"></HxSwitch>
                                                </div>
                                                <div class="table-responsive">
                                                    <table class="table table-sm">
                                                        <thead>
                                                            <tr>
                                                                <th scope="col"><small>Account</small></th>
                                                                <th scope="col"><small>Last voted</small></th>
                                                                <th scope="col"><small>Actual votes</small></th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @(
                                                        (MarkupString)showDetailsAsHtml(resultItem.Option)
                                                        )
                                                        </tbody>
                                                    </table>
                                                </div>


                                                <!-- end content-->
                                            </div>
                                        </div>
                                    </div>
                                }
                            }


                    </div>
                </div>
            </div>
            }
            <div class="col-lg-6 mb-4">
                <div class="card rounded-3 shadow-sm">
                    <div class="card-header py-3">
                        <h4 class="my-0 fw-normal">Popular vote results</h4>
                        @if (popularVoteIsLoading)
                        {
                            <span class="float-end">
                                <HxSpinner Size="SpinnerSize.Regular" Color="ThemeColor.Danger"></HxSpinner>
                            </span>


                        }


                    </div>
                    <div class="card-body">
                        @if (_popularVote is not null && _popularVote.Count > 0)
                        {
                            int positionpv = 0;
                            foreach (var voteResult in _popularVote.GroupBy(x => x.VoterChoice).OrderByDescending(x => x.Count()).Select(x => x).ToList())
                            {
                                positionpv++;
                                decimal optionVoteCounts = @_popularVote.Where(x => x.VoterChoice == voteResult.Key).Count();
                                <h4 class="small fw-bold">
                                    <span class="badge text-success"></span><span class="float-start">@String.Concat(@positionpv.ToString("D2"),". ",voteResult.Key)</span><span class="badge text-success"><em>@optionVoteCounts.ToString("N0") votes</em></span>

                                </h4>
                                <div class="progress mb-4">
                                    <div class="progress-bar bg-danger" aria-valuenow="@(((optionVoteCounts * 100) / _popularVote.Count()).ToString("N2"))" aria-valuemin="0" aria-valuemax="100" style="width: @(((optionVoteCounts * 100) / _popularVote.Count()).ToString("N2"))%" data-bs-toggle="tooltip" data-bs-placement="top" title="@(((optionVoteCounts * 100) / _popularVote.Count()).ToString("N2"))%">
                                        <span class="visually-hidden">@(((optionVoteCounts * 100) / _popularVote.Count()).ToString("N2"))%</span>
                                    </div>
                                    &nbsp;<em class="text-black">
                                        @(((optionVoteCounts * 100) / _popularVote.Count()).ToString("N2"))%
                                    </em>
                                </div>
                            }
                        }







                    </div>
                </div>
            </div>
        </div>


        @if (_invalidatedVotingInfo is not null && _invalidatedVotingInfo.Count > 0)
        {
            <div class="row">
                <div class="col">
                    <div class="card rounded-3 shadow-sm">
                        <div class="card-header py-3">
                            <h4 class="my-0 fw-normal">Invalidated vote results</h4>
                        </div>

                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th scope="col"><small>Account</small></th>
                                            <th scope="col"><small>Reason</small></th>
                                            <th scope="col"><small>Voted on</small></th>
                                            <th scope="col"><small>Index</small></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var info in _invalidatedVotingInfo)
                                        {
                                            <tr>
                                                <td><small><a href="@($"accountinfo?acc={info.Address}")" target="_blank">@info.Address</a></small></td>
                                                <td><small>@info.Reason</small></td>
                                                <td><small>@info.Option</small></td>
                                                <td><small>@info.LedgerIndex</small></td>

                                            </tr>
                                        }

                                    </tbody>
                                </table>
                            </div>



                        </div>
                    </div>
                </div>
            </div>

        }


    </div>
</div>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public string? votingId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "pn")]
    public string? projectName { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "pt")]
    public string? projectToken { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "si")]
    public int? votingStartIndex { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "ei")]
    public int? votingEndIndex { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "va")]
    public string? votingAccount { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "ia")]
    public string? issuerAccount { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "vca")]
    public string? votingControllerAccount { get; set; }



    private string _endPoint = "wss://xrplcluster.com/";
    private Ledger _latestLedgerIndex = new Ledger();

    //summary fields
    decimal totalVotes { get; set; }
    decimal totalAccounts { get; set; }

    //Dictionary<string, DateTime> accounts = new Dictionary<string, DateTime>(); //used to track votes by account, used for popular vote calculation.
    private List<VotingResults> _popularVote = new();
    private VotingResultReport _votingReport = new();
    private bool _isLive = false;

    //Spinners
    public bool popularVoteIsLoading = true;
    public bool generalVoteIsLoading = true;

    private string _warningMessage = string.Empty;



    //the table is currently sorted by
    private bool _sortDetailsByVotes = true;

    private int _totalInvalidatedVotes;
    private List<InvalidVotingsReport> _invalidatedVotingInfo = new();

    protected override async Task OnInitializedAsync()
    {


        StateHasChanged();
        _votingReport.ProjectToken = projectToken;
        _votingReport.ProjectName = projectName;
        _votingReport.LedgerIndex = (uint)votingEndIndex;
        _votingReport.VotingId = votingId;
        _votingReport.VotingName = votingId?.HexToString();
        _isLive = (votingEndIndex == 0);
        await GetVotingDetails();
        //await GetResultsFromXrpl();


        //get results
        await RetrieveResultsFromXrpl();

        //create actual voting report

        StateHasChanged();

    }

    private void ChangeSortOrder()
    {
        if (_sortDetailsByVotes)
        {
            _sortDetailsByVotes = false;
        }
        else
        {
            _sortDetailsByVotes = true;
        }
    }

    private void Refresh()
    {
        _navManager.NavigateTo(_navManager.Uri, forceLoad: true);
    }

    private async Task GetVotingDetails()
    {
        CancellationTokenSource ctx = new CancellationTokenSource(new TimeSpan(0, 0, 20)); //20 seconds
        var projectConfig = new ProjectConfig();
        projectConfig.ControllerAccount = votingControllerAccount;
        projectConfig.IssuerAccount = issuerAccount;
        projectConfig.ProjectToken = projectToken;
        projectConfig.ProjectName = projectName;
        projectConfig.VotingAccount = votingAccount;
        projectConfig.LedgerVotingStartIndex = (UInt32)votingStartIndex;

        Voting result;
        if (_isLive)
        {
            result = await _votingManager.GetLastVoting(projectConfig, ctx);
        }
        else
        {
            result = await _votingManager.GetVoting(projectConfig, (UInt32)votingStartIndex, (UInt32)votingEndIndex, ctx);
        }

        if (result is not null && result?.VotingOptions?.Count() > 0)
        {
            _votingReport.Details = new();

            foreach (var voteOption in result.VotingOptions)
            {
                _votingReport.Details.Add(new VoteResults()
                    {
                        Option = voteOption,
                        votingAccountDetails = new()

                    });
            }

        }
    }

    private async Task RetrieveResultsFromXrpl()
    {
        List<VotingResults> noAccountBalanceVotingResults = new();

        CancellationTokenSource popularVoteCTX = new CancellationTokenSource(new TimeSpan(0, 10, 0)); // set time-out to 10 minutes...
        popularVoteIsLoading = true;
        StateHasChanged();
        await foreach (var result in GetPopularVotesFromXRPL(popularVoteCTX))
        {

            noAccountBalanceVotingResults.Add(result); //will be used to crete final report

            var match = _popularVote.Where(x => x.VoterAddress == result.VoterAddress).OrderByDescending(x => x.VoteRegistrationIndex).FirstOrDefault();
            if (match is null)
            {
                _popularVote.Add(result);
            }
            else
            {
                if (match.VoteRegistrationDateTime < result.VoteRegistrationDateTime)
                {
                    //update
                    match.VoterChoice = result.VoterChoice;
                    match.VoteRegistrationDateTime = result.VoteRegistrationDateTime;
                }
                //else ignore

            }

            StateHasChanged();
        }

        popularVoteIsLoading = false;
        generalVoteIsLoading = true;
        int accountsWithVotes = 0;
        int totalVotesCastedOnInvalidOption = 0;

        if(_popularVote.Count > 1000)
        {
            _warningMessage = "The operation of retrieving account balances, might take up to an hour to finish as we need to process more than 1000 lookups from the ledger which will result in your connection being throttled (delayed). A future version will resolve this issue";
        }
        else
        {
            _warningMessage = string.Empty;
        }

        await foreach (var result in GetAccountBalanceFromXRPL())
        {
            var workingPopularVote = _popularVote.Where(x => x.VoterAddress == result.Address).OrderByDescending(x => x.VoteRegistrationIndex).FirstOrDefault(); ;

            if (!result.IsValid)
            {
                _invalidatedVotingInfo.Add(new InvalidVotingsReport()
                    {
                        Address = result.Address,
                        LedgerIndex = result.LedgerIndex,
                        VoteRecordedDateTime = result.LastRecordedVoteDateTime,
                        Reason = result.InvalidReason,
                        TotalVotes = result.Balance,
                        Option = workingPopularVote?.VoterChoice
                    });
            }

            //now update the last know voting date/time (should allign with the ledger index)
            result.LastRecordedVoteDateTime = workingPopularVote?.VoteRegistrationDateTime.ToLocalTime();


            //add item to vote
            var selectedOption = _votingReport.Details.FirstOrDefault(x => x.Option == workingPopularVote?.VoterChoice);
            if (selectedOption is not null)
            {
                selectedOption.votingAccountDetails.Add(result);
                accountsWithVotes++; //actual valid accounts as they have a vote count > 0
            }
            else
            {
                Console.WriteLine($"{workingPopularVote?.VoterChoice} not found");
                _invalidatedVotingInfo.Add(new InvalidVotingsReport()
                    {
                        Address = result.Address,
                        LedgerIndex = result.LedgerIndex,
                        VoteRecordedDateTime = result.LastRecordedVoteDateTime,
                        Reason = $"{workingPopularVote?.VoterChoice} not part of valid options",
                        TotalVotes = result.Balance,
                        Option = workingPopularVote?.VoterChoice
                    });

                totalVotesCastedOnInvalidOption++;
            }

            //summarize
            var totalVotesCast = _votingReport.Details.SelectMany(x => x.votingAccountDetails).Sum(x => x.Balance);
            _votingReport.TotalVotesCast = _votingReport.Details.SelectMany(x => x.votingAccountDetails).Sum(x => x.Balance);
            _votingReport.UniqueValidAccountsVoted = _votingReport.Details.SelectMany(x => x.votingAccountDetails).Count(x => x.IsValid);

            _totalInvalidatedVotes = _votingReport.Details.SelectMany(x => x.votingAccountDetails).Count(x => (!x.IsValid)) + totalVotesCastedOnInvalidOption;


            _votingReport.UniqueAccountsVoted = _popularVote.Select(x => x.VoterAddress).Distinct().Count();
            _votingReport.TotalAccountsVoted = _popularVote.Select(x => x.VoterAddress).Count();
            foreach (var detailItem in _votingReport.Details)
            {
                detailItem.TotalVotes = detailItem.votingAccountDetails.Sum(x => x.Balance);
                detailItem.TotalValidAccountsVoted = detailItem.votingAccountDetails.Count;
                if (_votingReport.TotalVotesCast > 0)
                {
                    detailItem.PercentageVote = (detailItem.TotalVotes * 100) / _votingReport.TotalVotesCast;
                }

            }
            StateHasChanged();
        }







        ////summarize
        //var totalVotesCast = _votingReport.Details.SelectMany(x => x.votingAccountDetails).Sum(x => x.Balance);
        //_votingReport.TotalVotesCast = _votingReport.Details.SelectMany(x => x.votingAccountDetails).Sum(x => x.Balance);
        //_votingReport.UniqueValidAccountsVoted = _votingReport.Details.SelectMany(x => x.votingAccountDetails).Count(x => x.IsValid);

        //_totalInvalidatedVotes = _votingReport.Details.SelectMany(x => x.votingAccountDetails).Count(x => (!x.IsValid)) + totalVotesCastedOnInvalidOption;


        //_votingReport.UniqueAccountsVoted = _popularVote.Select(x=>x.VoterAddress).Distinct().Count();
        //_votingReport.TotalAccountsVoted = _popularVote.Select(x => x.VoterAddress).Count();
        //foreach (var detailItem in _votingReport.Details)
        //{
        //    detailItem.TotalVotes = detailItem.votingAccountDetails.Sum(x => x.Balance);
        //    detailItem.TotalValidAccountsVoted = detailItem.votingAccountDetails.Count;
        //    if (_votingReport.TotalVotesCast > 0)
        //    {
        //        detailItem.PercentageVote = (detailItem.TotalVotes * 100) / _votingReport.TotalVotesCast;
        //    }

        //}

        // StateHasChanged();
        generalVoteIsLoading = false;
    }

    private async IAsyncEnumerable<VotingResults> GetPopularVotesFromXRPL(CancellationTokenSource ctx)
    {

        if (_isLive)
        {
            await foreach (var result in _votingManager.GetVotingResultsAsyncEnumerable(votingAccount, votingControllerAccount, (UInt32)votingStartIndex, ctx, _endPoint))
            {
                yield return result;

            }
        }
        else
        {
            await foreach (var result in _votingManager.GetVotingResultsAsyncEnumerable(votingAccount, votingControllerAccount, votingId, (UInt32)votingStartIndex, (UInt32)votingEndIndex, ctx, _endPoint))
            {
                yield return result;
            }
        }
    }

    private async IAsyncEnumerable<AccountBalance> GetAccountBalanceFromXRPL()
    {
        //Get ledger information
        //get account balances
        var ledgerCancellationToken = new CancellationTokenSource(new TimeSpan(0, 0, 20)); //5 minutes
        if (_isLive)
        {
            //get currenct
            _latestLedgerIndex = await _ledgerManager.GetLastLedgerIndex(ledgerCancellationToken, _endPoint);
        }
        else
        {
            //get last voting index
            _latestLedgerIndex = await _ledgerManager.GetSpecificLedgerIndex(ledgerCancellationToken, (uint)votingEndIndex, _endPoint);
        }




        await foreach (var balanceResult in _votingManager.GetVoterBalancesAsyncEnumerable(_popularVote.Select(x => x.VoterAddress).Distinct().ToList(), issuerAccount, _latestLedgerIndex.ledgerIndex, projectToken, _endPoint))
        {

            yield return balanceResult;


        }
    }

    private string showDetailsAsHtml(string option)
    {
        var details = _votingReport.Details.Where(x => x.Option == option).FirstOrDefault();
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        //var templateHtml = "<h4 class='small fw-bold'><span class='badge text-success text-xxl-start'></span>&emsp;<span><small><a class='link-success' href='/accountinfo?acc=#accountid#' target='_blank'>#accountid#</a>&nbsp;last voted on #votedAt#</small></span>&emsp;<span class='badge text-success float-end'>#totalvotes# votes</span>";
        var templateHtml = "<tr><th scope='row'><small><a class='link-success' href='/accountinfo?acc=#accountid#' target='_blank'>#accountidtrunc#</a></small></th><td><small>#votedAt#</small></td><td><small>#totalvotes#</small></td></tr>";
        if (details is not null)
        {

            foreach (var item in details.votingAccountDetails.ToList().OrderByDescending(x => x.GetType()
                                                            .GetProperty((_sortDetailsByVotes ? "Balance" : "LastRecordedVoteDateTime"))
                                                            .GetValue(x, null))
                                .ToList()) //.OrderByDescending(x => x.Balance))
            {
                string balance = string.Empty;
                if (item.Balance < 1)
                {
                    balance = item.Balance.ToString("N13");
                }
                else
                {
                    balance = item.Balance.ToString("N0");
                }


                sb.Append(templateHtml.Replace("#accountidtrunc#", item.Address.Truncate(12, true)).Replace("#accountid#", item.Address).Replace("#totalvotes#", balance).Replace("#votedAt#", item.LastRecordedVoteDateTime?.ToString("g")));
            }

        }
        if (sb.Length > 0)
        {
            return sb.ToString();
        }
        else
        {
            return string.Empty;
        }


    }






}
