@page "/liveresult"
@using Common.Extensions;
@inject HttpClient Http
@inject VotingManager _votingManager
@inject NavigationManager _navManager
@inject IJSRuntime JS

<PageTitle>Live voting results</PageTitle>
<section class="text-center container">
    <div class="row py-lg-5">
        <div class="col-lg-6 col-md-8 mx-auto">
            <h1 class="fw-light">@projectName</h1>
            <p class="lead text-muted">
                @votingId?.HexToString()
            </p><p>



                <span class="badge rounded-pill text-bg-light  mb-3">Ledger index start: @votingStartIndex?.ToString("N0")</span>
                <span class="badge rounded-pill text-bg-light  mb-3">Ledger last index:unknown</span>
                <span class="badge rounded-pill text-bg-light  mb-3">Total unique votes: @_votingReport?.UniqueAccountsVoted</span>
                <span class="badge rounded-pill text-bg-light  mb-3">Total votes cast: @_votingReport?.TotalVotesCast.ToString("N0")</span>
            </p>
        </div>
    </div>
</section>
<div class="album py-5 bg-light">
    <div class="container">
        @if (!_latestVotingFetched)
        {

            <div style="display:grid;place-items:center;margin-top:10%">
               @* <span class="loader">Fetching data from XRPL</span>*@
                <span class="loader">Work in progress</span>
            </div>

        }

     @*   @if (_votingReport is not null && _votingReport.Details is not null && _votingReport.Details.Count > 0)
        {
            <div class="row">
                <div class="col-lg-6 mb-4">
                    <div class="card rounded-3 shadow-sm">
                        <div class="card-header py-3">
                            <h4 class="my-0 fw-normal">Voting results</h4>

                        </div>
                        <div class="card-body">

                            @foreach (var resultItem in _votingReport.Details.OrderByDescending(x => x.PercentageVote))
                            {
                                var collapseId = string.Concat("rv", Guid.NewGuid());
                                <h4 class="small fw-bold">
                                    <span class="badge text-success"></span><span class="float-start">@resultItem.Option</span><span class="badge text-success"><em>@resultItem.TotalVotes.ToString("N0") votes</em></span>
                                    <button class="btn btn-sm btn-outline-dark position-relative float-end m-2" type="button" data-bs-toggle="collapse" data-bs-target="#@collapseId" aria-expanded="false" aria-controls="@collapseId">Details</button>
                                </h4>
                                <div class="progress mb-4">
                                    <div class="progress-bar bg-danger" aria-valuenow="@resultItem.PercentageVote.ToString("N0")" aria-valuemin="0" aria-valuemax="100" style="width: @resultItem.PercentageVote.ToString("N2")%;" data-bs-toggle="tooltip" data-bs-placement="top" title="@resultItem.PercentageVote.ToString("N2")%"><span class="visually-hidden">@resultItem.PercentageVote.ToString("N2")%</span></div>
                                    &nbsp;<em class="text-black">@resultItem.PercentageVote.ToString("N2")%</em>
                                </div>
                                <div class="col">
                                    <div class="collapse multi-collapse" id="@collapseId">
                                        <div class="card card-body">
                                            <!-- content-->
                                            @((MarkupString)showDetailsAsHtml(resultItem.Option))

                                            <!-- end content-->
                                        </div>
                                    </div>
                                </div>
                            }


                        </div>
                    </div>
                </div>
                <div class="col-lg-6 mb-4">
                    <div class="card rounded-3 shadow-sm">
                        <div class="card-header py-3">
                            <h4 class="my-0 fw-normal">Status information</h4>
                        </div>
                        <div class="card-body">
                            @if (_statuslog is not null)
                            {

                                <textarea class="form-control" style="font-size: .7em; font-weight:600;" rows="10" readonly>@string.Join(Environment.NewLine,_statuslog.AsEnumerable().Reverse().ToList())</textarea>
                            }

                        </div>
                    </div>
                </div>
            </div>
        }*@

    </div>
</div>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public string? votingId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "pn")]
    public string? projectName { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "pt")]
    public string? projectToken { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "si")]
    public int? votingStartIndex { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "va")]
    public string? votingAccount { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "ia")]
    public string? issuerAccount { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "vca")]
    public string? votingControllerAccount { get; set; }
    public List<string> _statuslog = new();


    private string _endPoint = "wss://xrplcluster.com/";
    private List<VotingResults> _votingResultsActual = new();
    private VotingResultReport _votingReport = new();
    private bool _latestVotingFetched = false;

    protected override async Task OnInitializedAsync()
    {
        _latestVotingFetched = false;
        StateHasChanged();
        _votingReport.ProjectToken = projectToken;
        _votingReport.ProjectName = projectName;
        _votingReport.VotingId = votingId;
        _votingReport.VotingName = votingId?.HexToString();

        //await GetLastVotingDetails();
        //await GetResultsFromXrpl();

        //_latestVotingFetched = true;
        //StateHasChanged();

    }

    private async Task GetLastVotingDetails()
    {
        CancellationTokenSource ctx = new CancellationTokenSource(new TimeSpan(0, 0, 20)); //20 seconds
        var projectConfig = new ProjectConfig();
        projectConfig.ControllerAccount = votingControllerAccount;
        projectConfig.IssuerAccount = issuerAccount;
        projectConfig.ProjectToken = projectToken;
        projectConfig.ProjectName = projectName;
        projectConfig.VotingAccount = votingAccount;
        projectConfig.LedgerVotingStartIndex = (UInt32)votingStartIndex;


        var result = await _votingManager.GetLastVoting(projectConfig, ctx);

        if (result is not null && result?.VotingOptions?.Count() > 0)
        {
            _votingReport.Details = new();

            foreach (var voteOption in result.VotingOptions)
            {
                _votingReport.Details.Add(new VoteResults()
                    {
                        Option = voteOption,
                        votingAccountDetails = new()

                    });
            }

        }
    }

    private async Task GetResultsFromXrpl()
    {

        CancellationTokenSource ctx = new CancellationTokenSource(new TimeSpan(0, 5, 0)); //5 minutes
        List<string> accounts = new();
        List<VotingResults> rawVotingResults = new();


        await foreach (var result in _votingManager.GetVotingResults(votingAccount, votingControllerAccount, (UInt32)votingStartIndex, ctx, _endPoint))
        {
            //rawVotingResults.Add(result);

            _statuslog.Add($"{result.VoteRegistrationDateTime.ToString("F")} - {result.VoterAddress} voted on {result.VoterChoice}");

            //check if account already has been registerd
            if (accounts.Contains(result.VoterAddress))
            {
                //let's remove
                foreach (var detail in _votingReport.Details)
                {
                    List<AccountBalance> itemsToRemove = new();
                    foreach (var account in detail.votingAccountDetails.Where(x => x.Address == result.VoterAddress))
                    {
                        itemsToRemove.Add(account);
                    }

                    if (itemsToRemove.Count > 0)
                    {
                        detail.votingAccountDetails.RemoveAll(x => itemsToRemove.Contains(x));
                        //update totals (subtract the votes)
                        detail.TotalVotes = detail.votingAccountDetails.Count();
                        detail.TotalAccountsVotedFor  = detail.votingAccountDetails.Count();
                        detail.PercentageVote = (detail.TotalVotes * 100) / _votingReport.TotalVotesCast;
                    }

                }



            }
            else
            {
                accounts.Add(result.VoterAddress);
            }

            // summarize bring states up to date
            var voteDetails = _votingReport.Details.Where(x => x.Option == result.VoterChoice).First();

            voteDetails.votingAccountDetails.Add(new AccountBalance
                {
                    Address = result.VoterAddress,
                    Balance = 1,
                    Currency = projectToken,
                    LedgerIndex = result.VoteRegistrationIndex
                });

            voteDetails.TotalVotes = voteDetails.votingAccountDetails.Count();
            voteDetails.TotalAccountsVotedFor = voteDetails.votingAccountDetails.Count();
            voteDetails.PercentageVote = (voteDetails.TotalVotes * 100) / _votingReport.TotalVotesCast;
            _votingReport.UniqueAccountsVoted = accounts.Distinct().Count();
            

            await InvokeAsync(StateHasChanged);
        }

    }


    private async Task GetAccountBalanceFromXrpl()
    {

        CancellationTokenSource ctx = new CancellationTokenSource(new TimeSpan(0, 5, 0)); //5 minutes
        List<string> accounts = _votingReport.Details.SelectMany(x => x.votingAccountDetails).Select(x => x.Address).ToList();
        List<VotingResults> rawVotingResults = new();

        //get account balances
        ctx = new CancellationTokenSource(new TimeSpan(0, 5, 0)); //5 minutes
        var ledgerIndex = (UInt32)rawVotingResults.Max(x => x.VoteRegistrationIndex);
        await foreach (var balanceResult in _votingManager.GetVoterBalancesAsync(accounts.Distinct().ToList(), issuerAccount, ledgerIndex, projectToken, ctx, _endPoint))
        {
            if (balanceResult.Balance > 0)
            {
                var optionVotedOn = rawVotingResults.Where(x => x.VoterAddress == balanceResult.Address).OrderByDescending(x => x.VoteRegistrationIndex).FirstOrDefault().VoterChoice;
                _statuslog.Add($"{balanceResult.Address} balance: {balanceResult.Balance} {balanceResult.Currency}");
                await InvokeAsync(StateHasChanged);
                // workingVotingResult.VotingWeight = balanceResult.Balance;
                // workingVotingResult.VotingWeightRegistrationDateTime = balanceResult.SnapShotDateTime;
                //  workingVotingResult.VotingWeightRegistrationIndex = balanceResult.LedgerIndex;

                //add item to vote
                var selectedOption = _votingReport.Details.First(x => x.Option == optionVotedOn);
                if (selectedOption is not null)
                {
                    selectedOption.votingAccountDetails.Add(balanceResult);
                }
            }


        }

        //summarize
        _votingReport.TotalVotesCast = _votingReport.Details.SelectMany(x => x.votingAccountDetails).Sum(x => x.Balance);
        _votingReport.UniqueAccountsVoted = accounts.Distinct().Count();
        foreach (var detailItem in _votingReport.Details)
        {
            detailItem.TotalVotes = detailItem.votingAccountDetails.Sum(x => x.Balance);
            detailItem.TotalAccountsVotedFor = detailItem.votingAccountDetails.Count;
            detailItem.PercentageVote = (detailItem.TotalVotes * 100) / _votingReport.TotalVotesCast;

        }





    }

    private string showDetailsAsHtml(string option)
    {
        var details = _votingReport.Details.Where(x => x.Option == option).FirstOrDefault();
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        var templateHtml = "<h4 class='small fw-bold'><span class='badge text-success text-xxl-start'></span>&emsp;<span><small><a class='link-success' href='https://xrpscan.com/account/#accountid#' target='_blank'>#accountid#</a></small></span>&emsp;<span class='badge text-success float-end'>#totalvotes# votes</span>";
        if (details is not null)
        {
            foreach (var item in details.votingAccountDetails.ToList().OrderByDescending(x => x.Balance))
            {
                sb.Append(templateHtml.Replace("#accountid#", item.Address).Replace("#totalvotes#", item.Balance.ToString("N0")));
            }

        }
        if (sb.Length > 0)
        {
            return sb.ToString();
        }
        else
        {
            return string.Empty;
        }


    }


}